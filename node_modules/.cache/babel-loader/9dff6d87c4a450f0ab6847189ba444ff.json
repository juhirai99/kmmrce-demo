{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nconst BREAKPOINTS = [576, 767, 992, 1200];\n\nconst isBrowser = () => typeof window !== \"undefined\";\n\nconst getSize = breakpoints => {\n  const innerWidth = isBrowser() ? window.innerWidth : 0;\n  return {\n    isMobile: innerWidth < breakpoints[1],\n    isPad1: innerWidth >= breakpoints[1] && innerWidth < breakpoints[2],\n    isPad2: innerWidth >= breakpoints[2] && innerWidth < breakpoints[3],\n    isLaptop: innerWidth >= breakpoints[3]\n  };\n};\n\nexport default function useBreakpoints(breakpoints = BREAKPOINTS) {\n  _s();\n\n  const [device, setDevice] = useState(getSize(breakpoints));\n  const changeSize = useCallback(() => {\n    setDevice(getSize(breakpoints));\n  }, [breakpoints]);\n  useEffect(() => {\n    window.addEventListener(\"resize\", changeSize);\n    return () => {\n      window.removeEventListener(\"resize\", changeSize);\n    };\n  }, [changeSize]);\n  return device;\n}\n\n_s(useBreakpoints, \"Z1cZve1ENI2jj2z81QQl3NPPj1U=\");","map":{"version":3,"sources":["/Users/amansiddique/Documents/GitHub/kmmrce-demo/src/hooks/useBreakpoint.js"],"names":["useState","useEffect","useCallback","BREAKPOINTS","isBrowser","window","getSize","breakpoints","innerWidth","isMobile","isPad1","isPad2","isLaptop","useBreakpoints","device","setDevice","changeSize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,MAAMC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAApB;;AAEA,MAAMC,SAAS,GAAG,MAAM,OAAOC,MAAP,KAAkB,WAA1C;;AAEA,MAAMC,OAAO,GAAIC,WAAD,IAAiB;AAC/B,QAAMC,UAAU,GAAGJ,SAAS,KAAKC,MAAM,CAACG,UAAZ,GAAyB,CAArD;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAED,UAAU,GAAGD,WAAW,CAAC,CAAD,CAD7B;AAELG,IAAAA,MAAM,EAAEF,UAAU,IAAID,WAAW,CAAC,CAAD,CAAzB,IAAgCC,UAAU,GAAGD,WAAW,CAAC,CAAD,CAF3D;AAGLI,IAAAA,MAAM,EAAEH,UAAU,IAAID,WAAW,CAAC,CAAD,CAAzB,IAAgCC,UAAU,GAAGD,WAAW,CAAC,CAAD,CAH3D;AAILK,IAAAA,QAAQ,EAAEJ,UAAU,IAAID,WAAW,CAAC,CAAD;AAJ9B,GAAP;AAMD,CATD;;AAWA,eAAe,SAASM,cAAT,CAAwBN,WAAW,GAAGJ,WAAtC,EAAmD;AAAA;;AAChE,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAACM,OAAO,CAACC,WAAD,CAAR,CAApC;AAEA,QAAMS,UAAU,GAAGd,WAAW,CAAC,MAAM;AACnCa,IAAAA,SAAS,CAACT,OAAO,CAACC,WAAD,CAAR,CAAT;AACD,GAF6B,EAE3B,CAACA,WAAD,CAF2B,CAA9B;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCD,UAAlC;AACA,WAAO,MAAM;AACXX,MAAAA,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCF,UAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACA,UAAD,CALM,CAAT;AAOA,SAAOF,MAAP;AACD;;GAfuBD,c","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nconst BREAKPOINTS = [576, 767, 992, 1200];\n\nconst isBrowser = () => typeof window !== \"undefined\";\n\nconst getSize = (breakpoints) => {\n  const innerWidth = isBrowser() ? window.innerWidth : 0;\n\n  return {\n    isMobile: innerWidth < breakpoints[1],\n    isPad1: innerWidth >= breakpoints[1] && innerWidth < breakpoints[2],\n    isPad2: innerWidth >= breakpoints[2] && innerWidth < breakpoints[3],\n    isLaptop: innerWidth >= breakpoints[3],\n  };\n};\n\nexport default function useBreakpoints(breakpoints = BREAKPOINTS) {\n  const [device, setDevice] = useState(getSize(breakpoints));\n\n  const changeSize = useCallback(() => {\n    setDevice(getSize(breakpoints));\n  }, [breakpoints]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", changeSize);\n    return () => {\n      window.removeEventListener(\"resize\", changeSize);\n    };\n  }, [changeSize]);\n\n  return device;\n}\n"]},"metadata":{},"sourceType":"module"}